# Файл: llm/generator.py

import json
from openai import OpenAI
# Импортируем наш ключ из файла конфигурации
from config import OPENAI_API_KEY

# Проверяем, есть ли у нас ключ, прежде чем создавать клиент
if not OPENAI_API_KEY:
    # Если ключа нет, создаем "пустышку", чтобы приложение не упало
    print("Невозможно создать OpenAI клиент: ключ не предоставлен.")
    client = None
else:
    # Создаем клиент для общения с OpenAI API
    client = OpenAI(api_key=OPENAI_API_KEY)


def generate_recommendations(raw_data: dict) -> str:
    """
    Принимает сырые данные от агентов, формирует промпт,
    отправляет его в GPT и возвращает текстовый отчет.
    """
    # Если клиент не был создан (нет ключа), возвращаем заглушку
    if not client:
        return "LLM генератор не активен: отсутствует API ключ OpenAI."

    # Превращаем наши Python-данные в красивую JSON-строку для промпта
    formatted_data = json.dumps(raw_data, indent=2, ensure_ascii=False)

    # --- ЭТО СЕРДЦЕ НАШЕЙ СИСТЕМЫ ---
    # Здесь мы "инструктируем" нейросеть, кем она должна быть и что делать.
    prompt = f"""
    Ты — ведущий эксперт по аналитике российских маркетплейсов. Тебе предоставлены данные в формате JSON по нескольким товарам (SKU).
    Твоя задача — выступить в роли бизнес-аналитика и написать краткий, но емкий отчет для менеджера.

    Правила отчета:
    1.  **Не выдумывай информацию.** Основывайся СТРОГО на предоставленных цифрах.
    2.  **Стиль:** Профессиональный, четкий, деловой, но понятный.
    3.  **Структура:**
        -   **Общий вывод (Executive Summary):** 1-2 предложения, самая суть.
        -   **Детали по каждому SKU:** Для каждого товара (SKU) дай краткую сводку и 1-2 ключевые рекомендации. Например: "По товару SKU-123 наблюдаются хорошие продажи, но цена ниже рыночной. Рекомендация: поднять цену на 5-10%".
    4.  **Форматирование:** Используй Markdown для списков и выделения **жирным** ключевых моментов.

    Вот данные для твоего анализа:
    ```json
    {formatted_data}
    ```

    Напиши отчет на русском языке.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o",  # Рекомендуется gpt-4o или gpt-4-turbo для лучшего качества
            messages=[
                {"role": "system", "content": "Ты — эксперт по аналитике маркетплейсов."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5, # Делаем ответ более сфокусированным
        )
        return response.choices[0].message.content # type: ignore

    except Exception as e:
        print(f"ОШИБКА при обращении к OpenAI: {e}")
        return f"Произошла ошибка при генерации отчета: {e}"
    
def answer_question(raw_data_for_aspect: dict, aspect_name: str, sku: str) -> str:
    """
    Отвечает на уточняющий вопрос по конкретному аспекту товара.
    """
    if not client:
        return "LLM генератор не активен: отсутствует API ключ OpenAI."

    formatted_data = json.dumps(raw_data_for_aspect, indent=2, ensure_ascii=False)

    prompt = f"""
    Ты — эксперт по аналитике маркетплейсов. Пользователь просит тебя подробнее рассказать об одном конкретном аспекте товара.
    Твоя задача — дать краткую, но содержательную справку на основе предоставленных данных.

    Правила:
    1.  **Не выдумывай информацию.** Интерпретируй только те цифры, что даны.
    2.  **Стиль:** Кратко и по делу.
    3.  **Контекст:** Товар (SKU) - `{sku}`, Аспект - `{aspect_name}`.

    Данные для анализа:
    ```json
    {formatted_data}
    ```

    Сформулируй ответ на русском языке.
    """
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": f"Ты — эксперт по аналитике маркетплейсов, отвечающий на вопрос по аспекту '{aspect_name}'."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
        )
        return response.choices[0].message.content # type: ignore

    except Exception as e:
        print(f"ОШИБКА при обращении к OpenAI: {e}")
        return f"Произошла ошибка при генерации ответа: {e}"